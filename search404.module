<?php

/**
 * @file
 * The search404 module file, does all the searching when a 404 occurs.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\String;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Get the keys that are to be used for the search based either
 * on the keywords from the URL or from the keys from the search
 * that resulted in the 404
 */
function search404_get_keys() {
  $language = \Drupal::languageManager()->getCurrentLanguage();

  $keys = '';
  // Try to get keywords from the search result (if it was one)
  // that resulted in the 404 if the config is set.
  if (\Drupal::config('search404.settings')->get('search404_use_search_engine')) {
    $keys = search404_search_engine_query();
  }
  // If keys are not yet populated from a search engine referer
  // use keys from the path that resulted in the 404.
  if (!$keys) {
    $keys = \Drupal::request()->query->get('destination');
  }

  // Abort query on certain extensions, e.g: gif jpg jpeg png
  $extensions = explode(' ', \Drupal::config('search404.settings')->get('search404_ignore_query'));
  $extensions = trim(implode('|', $extensions));
  if (!empty($extensions) && preg_match("/\.($extensions)$/i", $keys)) {
    return FALSE;
  }

  $regex_filter = \Drupal::config('search404.settings')->get('search404_regex');
  $keys_array[] = $keys;
  if (!empty($regex_filter)) {
    $keys = preg_replace("/" . $regex_filter . "/i", '', $keys);
  }
  // Ignore certain extensions from query.
  $extensions = explode(' ', \Drupal::config('search404.settings')->get('search404_ignore_extensions'));
  $extensions = trim(implode('|', $extensions));
  if (!empty($extensions)) {
    $keys = preg_replace("/\.($extensions)$/i", '', $keys);
  }

  $keys = preg_split('/[' . Unicode::PREG_CLASS_WORD_BOUNDARY  . ']+/u', $keys);

  // Ignore certain words (use case insensitive search).
  $keys = array_udiff($keys, explode(' ', \Drupal::config('search404.settings')->get('search404_ignore')), 'strcasecmp');
  // Sanitize the keys
  foreach ($keys as $a => $b) {
    $keys[$a] = String::checkPlain($b);
  }
  $modifier = \Drupal::config('search404.settings')->get('search404_use_or') ? ' OR ' : ' ';
  $keys = trim(implode($modifier, $keys));
  return $keys;
}

/**
 * Detect search from search engine.
 */
function search404_search_engine_query() {
  $engines = array(
    'altavista' => 'q',
    'aol' => 'query',
    'google' => 'q',
    'bing' => 'q',
    'lycos' => 'query',
    'yahoo' => 'p',
  );
  $parsed_url = parse_url($_SERVER['HTTP_REFERER']);
  $remote_host = !empty($parsed_url['host']) ? $parsed_url['host'] : '';
  $query_string = !empty($parsed_url['query']) ? $parsed_url['query'] : '';
  parse_str($query_string, $query);

  if (!$parsed_url === FALSE && !empty($remote_host) && !empty($query_string) && count($query)) {
    foreach ($engines as $host => $key) {
      if (strpos($remote_host, $host) !== FALSE && array_key_exists($key, $query)) {
        return trim($query[$key]);
      }
    }
  }
  return '';
}

/**
 * Search404 drupal_goto helper function.
 */
function search404_goto($path = '') {
  // set redirect response.
  $response = new RedirectResponse($path);
  if (\Drupal::config('search404.settings')->get('search404_redirect_301')) {
    $response->setStatusCode(301);
  }
  $response->send();
  return;
}
